# Импортируем модули time, random и wraps из functools
import time
import random
from functools import wraps

# Определяем декоратор для измерения времени выполнения функции
def timeit(method):
    # wraps помогает сохранить метаданные оригинальной функции
    @wraps(method)
    def timed(*args, **kw):
        # Запоминаем время начала выполнения функции
        ts = time.monotonic()
        # Вызываем оригинальную функцию и сохраняем результат
        result = method(*args, **kw)
        # Запоминаем время окончания выполнения функции
        te = time.monotonic()
        # Вычисляем затраченное время в миллисекундах
        ms = (te - ts) * 1000
        # Формируем строку с аргументами функции
        all_args = ', '.join(tuple(f'{a!r}' for a in args)
                             + tuple(f'{k}={v!r}' for k, v in kw.items()))
        # Печатаем имя функции, её аргументы и затраченное время
        print(f'{method.__name__}({all_args}): {ms:2.2f} ms')
        # Возвращаем результат оригинальной функции
        return result
    # Возвращаем обернутую функцию
    return timed

# Определяем функцию сортировки вставками и декорируем её для измерения времени
@timeit
def insertion_sort(lst):
    # Проходим по каждому элементу списка, начиная со второго
    for i in range(1, len(lst)):
        # Запоминаем текущий элемент
        key = lst[i]
        # Начинаем сравнивать с элементами перед текущим
        j = i - 1
        # Пока не достигнем начала списка и текущий элемент меньше предыдущего
        while j >= 0 and key < lst[j]:
            # Сдвигаем предыдущий элемент вперед
            lst[j + 1] = lst[j]
            # Переходим к следующему элементу
            j -= 1
        # Вставляем текущий элемент на его место
        lst[j + 1] = key
    # Возвращаем отсортированный список
    return lst

# Определяем список размеров для сортировки
sizes = [10, 100, 1000, 10000, 100000]

# Проходим по каждому размеру списка
for size in sizes:
    # Создаем список случайных чисел заданного размера
    lst = [random.randint(1, 100) for _ in range(size)]
    # Выполняем сортировку и измеряем время
    insertion_sort(lst)
